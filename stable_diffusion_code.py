# -*- coding: utf-8 -*-
"""Stable_diffusion_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vkCS2pZDhbUNyDcd7b0BMVaQrZ7XRmIr
"""

!pip install transformers diffusers accelerate
!pip install xformers
!pip install pillow
!pip install fastapi

"""

```
[User Interface] --> [Request Handling] --> [Server with Stable Diffusion] --> [Image Generation]
^                                                                                   |
|                                                                                   v
+-- [Response (Generated Image)] <---- [Bandwidth Handling] <-- [SSRDK Data Routing]

```

"""

!pip uninstall -y torchvision

!pip install torch==2.0.1+cu118 torchvision==0.15.2+cu118 --index-url https://download.pytorch.org/whl/cu118

!pip install torchaudio==2.0.2+cu118 --index-url https://download.pytorch.org/whl/cu118

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from diffusers import StableDiffusionPipeline
import torch
from PIL import Image
import io
import streamlit as st

# FastAPI setup
app = FastAPI()

# Model loading (Stable Diffusion)
model_id = "dreamlike-art/dreamlike-photoreal-2.0"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")

# Request Model
class ImageRequest(BaseModel):
    prompt: str

@app.post("/generate_image/")
async def generate_image(request: ImageRequest):
    try:
        # Generate image from prompt
        image = pipe(request.prompt).images[0]

        # Save the image
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='JPEG')
        img_byte_arr.seek(0)

        # Return the image as response
        return {"image": img_byte_arr.getvalue()}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

from PIL import Image
import matplotlib.pyplot as plt

# List of shortened prompts to generate images
prompts = [
    "Futuristic red sports car, city skyline, night setting",
    "Vintage 1960s classic car, chrome details, parked by the beach, sunset",
    "Futuristic electric vehicle, high-tech city, neon lights, nighttime",
    "Off-road SUV, rugged terrain, mountains in the background",
    "Luxury sedan, leather interiors, modern dashboard, sunroof open"
]

# Save and display the generated images based on prompts
def generate_images():
    images = []
    for i, prompt in enumerate(prompts):
        image = pipe(prompt).images[0]

        # Save locally for testing purposes
        image.save(f'car_image_{i}.jpg')
        images.append(image)

        # Display the image
        display_image = Image.open(f'car_image_{i}.jpg')  # Open the saved image
        plt.imshow(display_image)
        plt.axis("off")  # Hide axes
        plt.show()

generate_images()